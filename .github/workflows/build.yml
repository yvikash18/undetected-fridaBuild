name: undetected-frida-build

on:
  schedule:
    - cron: "0 9/12 * * *"
  workflow_dispatch:
    inputs:
      frida_version:
        description: 'Frida version tag to build (e.g. v16.5.2). Use "latest" to build latest release.'
        required: false
        default: 'v16.5.2'

env:
  # If you want to restrict which versions can be built from dispatch input,
  # set a comma-separated list here (no spaces). Leave empty to allow any tag.
  ALLOWED_FRIDA_VERSIONS: ""  # e.g. "v16.5.2,v16.5.1"

jobs:
  check:
    runs-on: ubuntu-22.04
    outputs:
      FRIDA_VERSION: ${{ steps.set.outputs.FRIDA_VERSION }}
    steps:
      - name: Resolve FRIDA_VERSION
        id: set
        run: |
          set -euo pipefail
          INPUT_VERSION="${{ github.event.inputs.frida_version || 'v16.5.2' }}"
          ALLOWED="${ALLOWED_FRIDA_VERSIONS:-}"

          if [ -n "$INPUT_VERSION" ] && [ "$INPUT_VERSION" != "latest" ]; then
            if [ -n "$ALLOWED" ]; then
              IFS=',' read -r -a arr <<< "$ALLOWED"
              ok=0
              for v in "${arr[@]}"; do
                if [ "$v" = "$INPUT_VERSION" ]; then ok=1; break; fi
              done
              if [ "$ok" -ne 1 ]; then
                echo "Dispatch input '$INPUT_VERSION' is not in ALLOWED_FRIDA_VERSIONS ('$ALLOWED')"
                exit 1
              fi
            fi
            FRIDA_VERSION="$INPUT_VERSION"
          else
            frida_version="$(curl -fsSL "https://api.github.com/repos/frida/frida/releases/latest" | jq -r .tag_name)"
            if [ -z "$frida_version" ] || [ "$frida_version" = "null" ]; then
              echo "Failed to determine latest frida release"
              exit 1
            fi
            FRIDA_VERSION="$frida_version"
          fi

          echo "FRIDA_VERSION=${FRIDA_VERSION}" >> "${GITHUB_OUTPUT}"
          echo "Resolved FRIDA_VERSION=${FRIDA_VERSION}"

  build:
    runs-on: ubuntu-22.04
    needs: check
    if: needs.check.outputs.FRIDA_VERSION != ''
    strategy:
      matrix:
        arch: [arm64, arm, x86_64, x86]
        os: [android]
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node 18
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Set up JDK 8
        uses: actions/setup-java@v4
        with:
          java-version: "8"
          distribution: temurin

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: NDK 25c setup
        run: |
          curl -sSLO https://dl.google.com/android/repository/android-ndk-r25c-linux.zip
          [ "$(sha1sum android-ndk-r25c-linux.zip | awk '{print $1}')" = "53af80a1cce9144025b81c78c8cd556bff42bd0e" ] || exit 1
          unzip -qo android-ndk-r25c-linux.zip; rm android-ndk-r25c-linux.zip;
          rm -rf "${ANDROID_NDK%/*}/25.2.9519653"; mv -v android-ndk-r25c "${ANDROID_NDK%/*}/25.2.9519653"; export ANDROID_NDK="${ANDROID_NDK%/*}/25.2.9519653"
          export ANDROID_NDK_HOME="${ANDROID_NDK}" ANDROID_NDK_ROOT="${ANDROID_NDK}" ANDROID_NDK_LATEST_HOME="${ANDROID_NDK}"

      - name: Install dependencies
        run: |
          [ $(id -u) -eq 0 ] || SUDO=sudo
          ${SUDO} apt-get update && DEBIAN_FRONTEND=noninteractive ${SUDO} apt-get install -y build-essential ninja-build gcc-multilib g++-multilib lib32stdc++-9-dev flex bison libc6-dev libc6-dev-i386 xz-utils plzip zstd pigz gettext-base
          ${SUDO} /opt/hostedtoolcache/Python/3.12.*/x64/bin/pip3 install -U setuptools lief

          _CARCH="${{ matrix.arch }}"; if [ "${_CARCH%64}" = "${_CARCH}" ]; then
            pushd /opt/hostedtoolcache/Python/3.12.*/x64/include/python3.12; patch -Rp1 <${{ github.workspace }}/pyconfig.h-i686-x86_64.patch || true; popd
          fi

      - name: Clone frida at tag and clone Frida-Patchs
        env:
          FRIDA_VERSION: ${{ needs.check.outputs.FRIDA_VERSION }}
        run: |
          set -euxo pipefail
          # clones into workspace/frida and workspace/Frida-Patchs
          git clone --recurse-submodules "https://github.com/frida/frida" -b "${FRIDA_VERSION}" frida || ( echo "clone failed" && exit 1 )
          git clone --depth=1 https://github.com/JsHookApp/Frida-Patchs Frida-Patchs || true
          ls -la

      - name: Apply patches (frida-core, frida-gum) if present
        run: |
          set -euxo pipefail
          PATCH_DIR="${GITHUB_WORKSPACE}/Frida-Patchs"
          FRIDA_DIR="${GITHUB_WORKSPACE}/frida"

          # patch paths inside Frida-Patchs repo might be frida-core/patch.patch and frida-gum/patch.patch
          if [ -d "${PATCH_DIR}" ]; then
            # frida-core
            if [ -f "${PATCH_DIR}/frida-core/patch.patch" ]; then
              echo "Applying frida-core patch..."
              pushd "${FRIDA_DIR}/subprojects/frida-core" || exit 0
              git apply --reject --whitespace=fix "${PATCH_DIR}/frida-core/patch.patch" || true
              popd
            else
              echo "No frida-core patch found at ${PATCH_DIR}/frida-core/patch.patch"
            fi

            # frida-gum
            if [ -f "${PATCH_DIR}/frida-gum/patch.patch" ]; then
              echo "Applying frida-gum patch..."
              pushd "${FRIDA_DIR}/subprojects/frida-gum" || exit 0
              git apply --reject --whitespace=fix "${PATCH_DIR}/frida-gum/patch.patch" || true
              popd
            else
              echo "No frida-gum patch found at ${PATCH_DIR}/frida-gum/patch.patch"
            fi
          else
            echo "Patch repo not present; skipping patch application."
          fi

      - name: Build Frida
        env:
          ANDROID_NDK: "${ANDROID_NDK%/*}/25.2.9519653"
          FRIDA_VERSION: ${{ needs.check.outputs.FRIDA_VERSION }}
        run: |
          set -euxo pipefail
          pushd frida

          # reuse original logic: random prefix/session values
          FRIDA_PREFIX="$(tr -cd 'a-z0-9' </dev/urandom | head -c32)" SESSION_SERVICE="$(tr -cd 'a-f0-9' </dev/urandom | head -c32)"
          export FRIDA_PREFIX SESSION_SERVICE

          ./configure --prefix="${PWD}/build" --host="${{ matrix.os }}-${{ matrix.arch }}" --enable-frida-tools --enable-gadget --enable-server --enable-portal -- -Dfrida-gum:devkits=gum,gumjs -Dfrida-core:devkits=core
          make -j"$(nproc)"

          popd

      - name: Post-process built binaries (anti-anti-frida)
        env:
          FRIDA_VERSION: ${{ needs.check.outputs.FRIDA_VERSION }}
        run: |
          set -euxo pipefail
          # Ensure we have lief
          python3 -m pip install --user lief || true
          PATH_USER="$(python3 -m site --user-base)/bin"
          export PATH="$PATH_USER:$PATH"

          # locate anti-anti script in frida repo (original frida has one under subprojects/frida-core/src)
          ANTISCRIPT="${GITHUB_WORKSPACE}/frida/subprojects/frida-core/src/anti-anti-frida.py"
          if [ -f "${ANTISCRIPT}" ]; then
            echo "Found anti-anti-frida.py at ${ANTISCRIPT}"
          else
            echo "anti-anti-frida.py not found; aborting post-processing step"
            exit 0
          fi

          # list of targets to process (examples you requested)
          # adjust paths if your build output path differs
          BUILDDIR="${GITHUB_WORKSPACE}/frida/build"
          # typical built binaries from make in your config:
          SERVER_BIN="${GITHUB_WORKSPACE}/frida/build/subprojects/frida-core/server/frida-server"
          GADGET_SO="${GITHUB_WORKSPACE}/frida/build/subprojects/frida-core/lib/gadget/frida-gadget.so"
          AGENT_SO="${GITHUB_WORKSPACE}/frida/build/subprojects/frida-core/lib/agent/frida-agent.so"
          INJECT_BIN="${GITHUB_WORKSPACE}/frida/build/frida-android-${{ matrix.arch }}/bin/frida-inject"
          PORTAL_BIN="${GITHUB_WORKSPACE}/frida/build/frida-android-${{ matrix.arch }}/bin/frida-portal"

          for f in "${SERVER_BIN}" "${GADGET_SO}" "${AGENT_SO}" "${INJECT_BIN}" "${PORTAL_BIN}"; do
            if [ -f "${f}" ]; then
              echo "Running anti-anti-frida on ${f}"
              python3 "${ANTISCRIPT}" "${f}" || echo "anti-anti failed for ${f} (continuing)"
            else
              echo "Not found: ${f}"
            fi
          done

      - name: Package artifacts
        env:
          FRIDA_VERSION: ${{ needs.check.outputs.FRIDA_VERSION }}
        run: |
          set -euxo pipefail
          mkdir -p artifacts
          # copy artifacts if they exist
          cp -a frida-server-* artifacts/ 2>/dev/null || true
          cp -a frida/build/subprojects/frida-core/server/frida-server artifacts/ 2>/dev/null || true
          cp -a frida/build/subprojects/frida-core/lib/gadget/frida-gadget.so artifacts/ 2>/dev/null || true
          cp -a frida/build/subprojects/frida-core/lib/agent/frida-agent.so artifacts/ 2>/dev/null || true
          cp -a frida/build/frida-android-*/bin/* artifacts/ 2>/dev/null || true

          tar -C artifacts -cvf "frida-artifacts-${{ matrix.arch }}-${FRIDA_VERSION}.tar" .

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frida-artifacts-${{ matrix.arch }}
          path: frida-artifacts-*.tar

  assemble:
    runs-on: ubuntu-22.04
    needs: build
    if: needs.check.outputs.FRIDA_VERSION != ''
    steps:
      - name: Download all architecture artifacts
        uses: actions/download-artifact@v4
        with:
          path: frida-artifacts

      - name: Create combined archive
        env:
          FRIDA_VERSION: ${{ needs.check.outputs.FRIDA_VERSION }}
        run: |
          set -euxo pipefail
          mkdir -p combined
          cp frida-artifacts/* combined/ || true
          tar -C combined -czf "undetected-frida-all-${FRIDA_VERSION}.tar.gz" .
          ls -l "undetected-frida-all-${FRIDA_VERSION}.tar.gz"

      - name: Upload combined artifact
        uses: actions/upload-artifact@v4
        with:
          name: undetected-frida-all-${{ needs.check.outputs.FRIDA_VERSION }}
          path: undetected-frida-all-*.tar.gz
